/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.entities.Ticket;
import org.example.entities.Train;
import org.example.entities.User;
import org.example.services.TrainService;
import org.example.services.UserBookingService;
import org.example.util.userUtilService;

import java.io.IOException;
import java.net.URISyntaxException;
import java.time.LocalDateTime;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.IntStream;



public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) throws CloneNotSupportedException, IOException, URISyntaxException {
/*
       // System.out.println(new App().getGreeting());
        List<Integer> l = Arrays.asList(1,2,4,5,6,8,8,9);
        List<Integer> l1= l.stream().filter(iseven()).collect(Collectors.toList());
        System.out.println(l1);
        List<Integer> l2= l.stream().map(e->e*2).collect(Collectors.toList());
        System.out.println(l2);
    }

    public static Predicate<Integer> iseven()
    {
        System.out.println(1);
        return i->i%2==0;
    }

   /* Integer apply(Integer i)
    {
        return 2*i;
    }*/

        System.out.println("Welcome to the booking app");
        String projectRoot = System.getProperty("user.dir");
        System.out.println(projectRoot);
        Scanner scanner = new Scanner(System.in);
        int option =0;
        UserBookingService userBookingService;
        try{
            userBookingService = new UserBookingService();
        }catch(IOException ex){
            System.out.println("There is something wrong");
            return;
        }
        User usertologin = null;

        while(option!=7) {
            System.out.println("Choose option");
            System.out.println("1. Sign up");
            System.out.println("2. Login");
            System.out.println("3. Fetch Bookings");
            System.out.println("4. Search Trains and book ticket");
           // System.out.println("5. Book a Seat");
            System.out.println("6. Cancel my Booking");
            System.out.println("7. Exit the App");
            option = scanner.nextInt();
            Train trainSelectedForBooking = new Train();

            switch (option){
                case 1:
                    System.out.println("Enter the username to signup");
                    String nameToSignUp = scanner.next();
                    System.out.println("Enter the password to signup");
                    String passwordToSignUp = scanner.next();
                    User usertosignup = new User(UUID.randomUUID().toString(),nameToSignUp,passwordToSignUp, userUtilService.hashedpassword(passwordToSignUp),new ArrayList<>());
                    userBookingService.signUp(usertosignup);
                    String str2 = String.format("The signed user is %s and the userbookingservice is %s", usertosignup.getUserName(),userBookingService);

                    System.out.println(str2);
                    break;

                case 2:
                    System.out.println("Enter the name to login");
                    String nametologin= scanner.next();
                    System.out.println("Enter the password to login");
                    String passwordtologin= scanner.next();

                    usertologin = new User(UUID.randomUUID().toString(), nametologin, passwordtologin, userUtilService.hashedpassword(passwordtologin), new ArrayList<>());
                    usertologin.setUserId(usertologin.getUserId());
                    try {
                        userBookingService = new UserBookingService(usertologin);
                        userBookingService.loginUser();
                        String str3 = String.format("The logged in user is %s and the userbookingservice is %s", usertologin.getUserName(), userBookingService);
                        System.out.println("Successfully Userlogged in ");
                    } catch (IOException ex) {
                        System.out.println("There is something wrong");
                        return;
                    }

                    break;
                case 3:
                    System.out.println("Fetching your bookings");
                    userBookingService.fetchBooking();
                    break;
                case 4:
                    System.out.println("Enter you source");
                    String source= scanner.next();
                    System.out.println("Type your destination station");
                    String dest = scanner.next();
                    List<Train> trains = userBookingService.getTrains(source,dest);

                    int index = 0;
                    for (Train t: trains) {
                        System.out.println(index + " Train id : " + t.getTrainId());
                        for (Map.Entry<String, String> entry : t.getStationTime().entrySet()) {
                            System.out.println("station " + entry.getKey() + " time: " + entry.getValue());
                        }
                        index++;
                    }
                    System.out.println("Select a train by typing 0,1,2,3...");
                 //   trainSelectedForBooking = new Train();
                    trainSelectedForBooking = trains.get(scanner.nextInt());
                    Train t1 = new Train(trainSelectedForBooking.getTrainNo(),trainSelectedForBooking.getTrainId(),trainSelectedForBooking.getSeats(),trainSelectedForBooking.getStationTime(),trainSelectedForBooking.getStations());
                    System.out.println("t1 " + t1.getTrainNo());
                    try {
                        TrainService train = new TrainService(t1);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                    System.out.println(t1);
                    System.out.println("trainSelectedForBooking is "+trainSelectedForBooking);
                  //  break;
                 //   case 5:
                    System.out.println("Select a seat out of these seats");
                    List<List<Integer>> seats = userBookingService.fetchseats(trainSelectedForBooking);
                    for (List<Integer> row1: seats){
                        for (Integer val: row1){
                            System.out.print(val+" ");
                        }
                        System.out.println();
                    }
                    System.out.println("Select the seat by typing the row and column");
                    System.out.println("Enter the row");
                    int row = scanner.nextInt();
                    System.out.println("Enter the column");
                    int col = scanner.nextInt();
                    System.out.println("Booking your seat....");
                    Boolean booked = userBookingService.bookTrainSeat(trainSelectedForBooking, row, col);
                    if(booked.equals(Boolean.TRUE)){
                        System.out.println("Booked! Enjoy your journey");
                    }else{
                        System.out.println("Can't book this seat");
                    }


                    Ticket ticket = new Ticket(UUID.randomUUID().toString(), usertologin.getUserId(),source,dest,LocalDateTime.now().toString(),trainSelectedForBooking);
                    List<Ticket> TICKETList = new ArrayList<>();
                    TICKETList.add(ticket);
                    try {
                        userBookingService.userticketmapped(usertologin,TICKETList);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                    /*if(booked.equals(Boolean.TRUE)){
                        System.out.println("UserMapped");
                    }else{
                        System.out.println("User not mapped");
                    }*/
                    break;

                case 6:
                    System.out.println("Enter the ticket is to cancel");
                    String ticketId = scanner.next();
                    Boolean Boolean = userBookingService.cancelBooking(ticketId);
                    break;
                    default:
                    break;

            }
        }
    }
}
